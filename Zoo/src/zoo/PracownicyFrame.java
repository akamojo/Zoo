/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zoo;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import static zoo.Zoo.getShowPosition2;

/**
 *
 * @author akamojo
 */
public class PracownicyFrame extends javax.swing.JFrame {

    /**
     * Creates new form PracownicyFrame
     */
    public PracownicyFrame() {
        initComponents();
        setIconImage(Zoo.getIcon());
        String[] columns = new String[]{"Id", "Nazwisko", "Pensja", "Premia", "Etat", "Godziny", "Zatrudniony"};
        CacheSqlTableModel model = new CacheSqlTableModel("select ID, NAZWISKO, PENSJA, PREMIA, ETATY_NAZWA, GODZIN_TYGODNIOWO, DATA_ZATRUDNIENIA"
                + " from pracownicy WHERE DATA_ZWOLNIENIA IS NULL", columns, "ORDER BY NAZWISKO");
        pracownicyTable.setModel(model);
        pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(0));
        try {
            this.setColumns();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), ex, "Smutax Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void setColumns() throws SQLException {
        columnComboBox.setModel(this.loadColumns());
        columnComboBox.setSelectedItem("WSZYSTKIE");
    }
    
    public DefaultComboBoxModel<String> loadColumns() throws SQLException {
        Execute exec = new Execute();
        exec.ExecuteQuery("SELECT COUNT(*) FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'PRACOWNICY'"
                + " AND COLUMN_NAME != 'DATA_ZWOLNIENIA'");
        ResultSet rs = exec.getRs();
        
        int count = 0;
        if (rs.next())
            count = rs.getInt(1);
        count += 1;
        String[] types = new String[count];
        
        exec.ExecuteQuery("SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'PRACOWNICY'"
                + " AND COLUMN_NAME != 'DATA_ZWOLNIENIA'");
        rs = exec.getRs();
        int i;
        for (i = 0; i < count-1; i++) {
            rs.next();
            types[i] = rs.getString(1);
        }
        types[i] = new String("WSZYSTKIE");
        return new javax.swing.DefaultComboBoxModel<String>(types);
    }

    public void refresh() {
        //((CacheSqlTableModel) pracownicyTable.getModel()).fireTableDataChanged();
        String[] columns = new String[]{"Id", "Nazwisko", "Pensja", "Premia", "Etat", "Godziny", "Zatrudniony"};
        CacheSqlTableModel model = new CacheSqlTableModel("select ID, NAZWISKO, PENSJA, PREMIA, ETATY_NAZWA, GODZIN_TYGODNIOWO, DATA_ZATRUDNIENIA "
                + "from pracownicy WHERE DATA_ZWOLNIENIA IS NULL", columns, "ORDER BY NAZWISKO");
        pracownicyTable.setModel(model);
        pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        searchPanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        columnComboBox = new javax.swing.JComboBox<>();
        buttonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        pracownicyTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Zoo Pracownicy");
        setMinimumSize(new java.awt.Dimension(250, 250));
        setPreferredSize(new java.awt.Dimension(750, 500));

        searchPanel.setLayout(new java.awt.GridBagLayout());

        searchLabel.setText("Wyszukaj pracownika:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchPanel.add(searchLabel, gridBagConstraints);

        searchTextField.setPreferredSize(new java.awt.Dimension(100, 20));
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchPanel.add(searchTextField, gridBagConstraints);

        columnComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        columnComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchPanel.add(columnComboBox, gridBagConstraints);

        getContentPane().add(searchPanel, java.awt.BorderLayout.PAGE_START);

        addButton.setText("Dodaj nowego pracownika");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(addButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        tablePanel.setLayout(new java.awt.BorderLayout());

        pracownicyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        pracownicyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pracownicyTableMouseClicked(evt);
            }
        });
        tableScrollPane.setViewportView(pracownicyTable);

        tablePanel.add(tableScrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(tablePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pracownicyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pracownicyTableMouseClicked
        if (evt.getClickCount() == 2) {
            int selectionIndex = pracownicyTable.getSelectionModel().getMinSelectionIndex();
            if (selectionIndex >= 0) {
                CacheSqlTableModel tableModel = (CacheSqlTableModel) pracownicyTable.getModel();
                int selectedId = tableModel.getSelectedId(pracownicyTable.getSelectedRow());
                PracownikFrame prac = new PracownikFrame(this);
                prac.setLocation(getShowPosition2(prac));
                prac.fill(selectedId);
                prac.setVisible(true);
            }
        }
    }//GEN-LAST:event_pracownicyTableMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        PracownikFrame prac = new PracownikFrame(this);
        prac.setLocation(getShowPosition2(prac));
        prac.setVisible(true);
        prac.visibleButton(false);
        prac.emptyView();
    }//GEN-LAST:event_addButtonActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (searchTextField.getText().isEmpty()) {
                refresh();
            } else {
                try {
                    String[] columns = new String[]{"Id", "Nazwisko", "Pensja", "Premia", "Etat", "Godziny", "Zatrudniony", "Zwolniony"};
                    if (columnComboBox.getSelectedItem().toString().equals("WSZYSTKIE")) {
                        Execute ex = new Execute();

                        CallableStatement cstmt = DBSupport.getConn().prepareCall("{? = call GET_SEARCH_QUERY(PATTERN => ?, IN_TABLE_NAME => 'PRACOWNICY')}");                
                        cstmt.registerOutParameter(1, Types.VARCHAR);
                        cstmt.setString(2, searchTextField.getText());
                        cstmt.execute();
                        String wynik = cstmt.getString(1);

                        // resPracMiesiacaLabel.setText(wynik);

                        CacheSqlTableModel model = new CacheSqlTableModel(wynik, columns, "ORDER BY NAZWISKO");
                        pracownicyTable.setModel(model);
                        pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(0));
                        pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(6));
                    }
                    else {
                        String kolumna = columnComboBox.getSelectedItem().toString();
                        Execute q = new Execute();
                        
                        if (kolumna.equals("DATA_ZATRUDNIENIA")) {
                            String query = "SELECT * FROM PRACOWNICY WHERE TO_CHAR(" + kolumna + ", 'YYYY-MM-DD') LIKE ?";
                            
                            String myTable[] = {searchTextField.getText().trim()};
                            CacheSqlTableModel model = new CacheSqlTableModel(query, columns, "ORDER BY NAZWISKO", myTable);
                            pracownicyTable.setModel(model);
                            pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(0));
                            pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(6));
                        }
                        else {
                            String query = "SELECT * FROM PRACOWNICY WHERE LOWER(TO_CHAR(" + kolumna + ")) LIKE ?";
                            
                            String myTable[] = {searchTextField.getText().trim().toLowerCase()};
                            CacheSqlTableModel model = new CacheSqlTableModel(query, columns, "ORDER BY NAZWISKO", myTable);
                            pracownicyTable.setModel(model);
                            pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(0));
                            pracownicyTable.removeColumn(pracownicyTable.getColumnModel().getColumn(6));
                        }
                        //SELECT * FROM PRACOWNICY WHERE TO_CHAR(DATA_ZWOLNIENIA, 'YYYY-MM-DD') LIKE '%wet%' OR LOWER(TO_CHAR(ID)) LIKE '%wet%' OR LOWER(TO_CHAR(NAZWISKO)) LIKE '%wet%' OR LOWER(TO_CHAR(PENSJA)) LIKE '%wet%' OR LOWER(TO_CHAR(PREMIA)) LIKE '%wet%' OR LOWER(TO_CHAR(ETATY_NAZWA)) LIKE '%wet%' OR LOWER(TO_CHAR(GODZIN_TYGODNIOWO)) LIKE '%wet%' OR TO_CHAR(DATA_ZATRUDNIENIA, 'YYYY-MM-DD') LIKE '%wet%'
                        
                    }
                    
                    
                } catch (SQLException ex1) {
                    Logger.getLogger(PracownicyFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void columnComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnComboBoxActionPerformed
        
    }//GEN-LAST:event_columnComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PracownicyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PracownicyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PracownicyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PracownicyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PracownicyFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JComboBox<String> columnComboBox;
    private javax.swing.JTable pracownicyTable;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables

}
